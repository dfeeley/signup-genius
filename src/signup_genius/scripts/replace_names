#!/usr/bin/env python
"""
Utility script to replace real names / real comments with fake ones in a signup genius html file.
Our test data consists of what were once real signup genius forms with real data, so we run them
through this script before pushing to github
"""
import argparse
import json
import logging
import names
import pathlib
import random
import re

from signup_genius import get_signups_from_html

COMMENTS = ['A comment', 'Another comment', 'Interesting comment', 'Just picking daisies', 'Nothing to see here']


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('files', nargs='+')
    parser.add_argument(
        '-q', '--quiet', help="Only warnings or errors",
        action="store_const", dest="loglevel", const=logging.WARNING, default=logging.INFO,
    )
    parser.add_argument(
        '-v', '--verbose', help="Be verbose", action="store_const", dest="loglevel", const=logging.DEBUG
    )
    return parser.parse_args()


def replace_names_in_html_file(path):
    html = path.read_text()
    for signup in get_signups_from_html(html):
        html = html.replace(signup.name, names.get_full_name())
    html = re.sub(r'<div class="SUGMemberComment">.*?</div>', random_comment_div, html)
    html = re.sub(r'<span class="SUGsmall">.*?</span>', random_comment_span, html)
    path.write_text(html)


def replace_names_in_json_file(path):
    with open(path) as f:
        data = json.load(f)

    try:
        participants = data['DATA']['participants']
    except (KeyError, TypeError):
        return

    if isinstance(participants, list):
        for item in participants:
            item['FIRSTNAME'] = names.get_first_name()
            item['LASTNAME'] = names.get_last_name()
            item['MYCOMMENT'] = ''
    elif isinstance(participants, dict):
        for _, items in participants.items():
            for item in items:
                item['FIRSTNAME'] = names.get_first_name()
                item['LASTNAME'] = names.get_last_name()
                item['MYCOMMENT'] = ''
    path.write_text(json.dumps(data, indent=2))


def main():
    args = parse_args()
    logging.basicConfig(level=args.loglevel)
    for file in args.files:
        path = pathlib.Path(file).resolve()

        if path.suffix in ('.htm', '.html'):
            replace_names_in_html_file(path)
        elif path.suffix in ('.json'):
            replace_names_in_json_file(path)
        else:
            raise ValueError(f'Unrecognized file suffix for file {path}')


def random_comment_div(match):
    return f'<div class="SUGMemberComment">{random.choice(COMMENTS)}</div>'


def random_comment_span(match):
    return f'<span class="SUGsmall">{random.choice(COMMENTS)}</span>'


if __name__ == '__main__':
    raise SystemExit(main())
